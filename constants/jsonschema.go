// Code generated by go-bindata.
// sources:
// schema/0.1.0/seed.manifest.example.json
// schema/0.1.0/seed.manifest.schema.json
// schema/0.1.0/seed.metadata.schema.json
// DO NOT EDIT!

package constants

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema010SeedManifestExampleJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x0c\x88\x3d\x15\xb6\x2c\x27\xeb\x1c\x7c\x6a\xbb\x8e\x11\x17\x75\xb2\xd8\x75\xf6\x52\x2c\x0c\x96\x1a\x49\x4c\x44\x52\x25\xa9\x75\x5c\x43\xff\xbd\x20\x2d\x4b\x94\x3f\x80\x74\x81\xe4\x94\xe1\xbc\x99\x79\x33\xf3\x48\x79\x77\x05\x40\x0c\x62\xf2\x0d\xb5\xe1\x4a\x92\x29\x90\x38\x1a\x47\x31\x19\x38\xcf\xb3\xfa\x9b\x4c\xc1\x81\x00\x88\xa4\x02\x9d\x5f\x6c\x87\xb4\xc8\x94\xe6\x36\x17\x1e\x06\x40\xda\x83\x20\xcf\x38\x8a\x9b\x3c\x00\xa4\xa4\xec\x85\x66\x78\xc9\x6d\xb9\x2d\x7c\xf2\xe5\x16\x52\xae\x8d\x85\x93\x12\x09\x1a\xa6\x79\x69\x9b\xf0\x2f\x48\x13\x03\x54\xc2\xfd\x6c\x3e\x81\x94\x17\x08\x54\x26\xa0\x2a\x5b\x56\xd6\x80\xdd\x28\x58\x2d\xe6\x73\xe0\x82\x66\x68\x06\x40\xe1\xd3\xd7\x6f\x1e\x22\xa8\xe4\x29\x1a\x0b\x4c\x49\x4b\xb9\xe4\x32\x03\x86\x45\xb1\x66\xaa\x92\xb6\x65\x44\x33\x43\xa6\xf0\x97\xb7\x00\x48\x9e\xa4\x93\xc6\xe7\xf9\xa6\x69\x67\x31\xf3\xa3\x33\x7c\x41\x28\xb5\x62\x68\x0c\x97\x19\xf1\x8e\xef\x4d\x5a\x41\xb9\x2f\x8a\xba\x1d\x6c\x30\xda\x3f\x54\x2e\x61\xa6\xb0\xcb\xa6\x74\x46\x25\xff\x97\x1e\xda\xbe\x1b\x32\xa5\xcb\xce\x8f\x82\xf2\xc2\x39\x9e\x13\x85\xbf\xe2\x2b\x15\x65\x81\x11\x53\xa2\x83\x54\xda\x03\x72\x6b\xcb\xe9\x68\xb4\xd9\x6c\xa2\xb3\xb0\x32\x57\xd2\x93\xb8\xbd\xbd\x1d\x4e\x26\x93\xe1\xc7\x9b\xeb\xf1\x9e\x7c\xdd\x6e\x49\xa0\xaa\x2c\x99\xc2\xcd\x6d\x1c\x37\x87\x5c\x5a\xd4\x29\x65\x18\x36\xc4\x94\x10\x54\x26\x2e\xdd\x87\xdd\xe2\xe1\xf3\xd3\x6a\x3d\x5f\xfc\x79\x57\xc3\x87\xdd\xe3\xd3\xca\x99\xb3\xc5\x97\x3a\x18\x9a\x74\x5b\x0b\x32\x00\x10\xb7\xd3\x70\x05\xee\x6f\x17\xfc\x1f\xcc\xad\xab\xd0\xa6\x6c\x10\x1a\xff\xa9\xb8\x46\xc7\xc4\xea\x0a\x8f\xbc\x02\x13\x4e\x57\xdb\xf2\xa4\x4e\xb7\xc9\xd1\xeb\xd0\xad\x7e\xe8\x0d\xd2\x83\x7c\x0f\xac\xfa\xea\xf8\xb4\xee\x76\xb8\xd7\xe4\x4f\x77\xb7\x8f\x5f\xbb\x88\xb5\x13\x9e\x39\x6e\xb2\x6d\xc3\xa1\xf7\xac\x7b\x02\x6d\x97\xe2\xf4\x3d\x05\x72\x7d\xec\x29\xa9\xb5\xa8\x65\x53\xcc\x15\xfa\x25\xb2\x3c\x0d\xdb\xad\x07\xff\x8f\x68\x78\x27\xce\xd1\xb4\xf8\x6a\x47\x67\x40\xe7\xa8\x38\xd8\xf9\x59\x77\xc1\xe4\xd9\xf8\x1b\xf2\x86\x79\x9e\x5c\xf6\x16\xf1\x82\xdb\x03\xe0\xd3\x39\xbf\x3d\xcc\x58\x5a\xcc\x50\x5f\x20\x75\x22\x00\xe1\x72\xf5\x97\x1d\x52\x6b\x89\x2d\x1f\x9f\x1e\x56\xeb\xcf\xbf\xad\xee\x7b\x85\xdd\x4c\x72\xe7\x1f\xd9\x1c\x47\xcd\xab\x85\x7a\xe4\x8f\x7b\x40\xa1\x12\x9f\x48\xab\x8e\xda\x81\x58\x3b\x2b\x62\xd0\x5a\x2e\xb3\x37\x10\x9a\xfd\xbe\xbe\x7f\xfc\xba\xea\x17\x31\xc8\x34\x3a\x1d\xa5\xb4\x30\x78\x5a\xa7\xf7\x64\x68\x34\xaa\xd2\x0c\x43\xf5\x13\xc3\x68\x41\x75\xbf\x7c\xb0\x9e\xb2\x22\x03\x20\x3f\x68\x51\x39\x7b\x1c\xc5\xa1\xf8\x02\xa0\x40\xd1\x03\xc6\xd7\x1f\x2f\x62\x4d\x4e\x35\x26\xcb\x7e\x44\x7c\x11\x9e\x70\xf3\xd2\xcf\x1d\xc5\x83\xe6\x99\x5a\x56\x85\xe5\x65\xc1\xfd\x13\xee\x2b\x9e\xed\x1c\xb5\x56\x3a\x9c\x71\x70\xf9\xd9\x7e\x4f\xe3\x40\xbe\xed\x17\xf0\xce\xc5\xc1\x83\x23\x12\xb8\x8f\xbe\x7e\x7b\xd0\x2c\x38\x0c\xb0\x8c\x5a\xcc\x94\xf6\x52\x36\x5b\x63\x51\x90\x63\x49\x9e\x72\xb9\x7e\x7f\x2e\x09\xb5\xf4\x0d\x4c\x6e\xde\x9f\x49\xf7\xe3\xe2\x2a\x14\xaf\x5b\x60\x7d\x55\xff\x17\x00\x00\xff\xff\x56\x13\xff\x15\x15\x09\x00\x00")

func schema010SeedManifestExampleJsonBytes() ([]byte, error) {
	return bindataRead(
		_schema010SeedManifestExampleJson,
		"schema/0.1.0/seed.manifest.example.json",
	)
}

func schema010SeedManifestExampleJson() (*asset, error) {
	bytes, err := schema010SeedManifestExampleJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0.1.0/seed.manifest.example.json", size: 2325, mode: os.FileMode(436), modTime: time.Unix(1503409143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema010SeedManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x08\x76\x0f\x76\x52\x25\x0e\xd0\x4b\x72\x29\xf6\x01\x0a\xf4\x50\xf4\xb0\xb1\x5b\xd0\xd2\x58\x66\x56\x22\x55\x8a\x6a\xe1\x6d\xfc\xee\x85\x7e\x62\xcb\xfc\x57\x6c\x6f\x77\x61\xef\x65\x83\xe1\x70\x66\x48\x7d\xdf\xc7\xb1\xc4\x7f\x23\x84\xf0\x87\x2a\x59\x43\x41\xf0\x13\xc2\x6b\x29\xcb\xa7\xfb\xfb\x97\x8a\xb3\xb8\xb3\xde\x71\x91\xdd\xa7\x82\xac\x64\x3c\xfb\xe9\xbe\xb3\xfd\x80\x7f\x6c\xe6\xc9\x4d\x09\xcd\x24\xbe\x7c\x81\x44\x76\x36\x92\xa6\x54\x52\xce\x48\xfe\xab\xe0\x25\x08\x49\xa1\xc2\x4f\x68\x45\xf2\x0a\x5a\x87\x72\x68\x6e\xd2\x23\x84\x2b\x80\xf4\x77\x10\x15\xe5\x6c\x67\x1c\xc4\xaf\xa4\xa0\x2c\x6b\xe3\xb7\xf6\x92\x48\x09\xa2\x71\xc5\x7f\xcc\xee\x1e\xee\x66\x1f\x70\x3b\xb4\xed\x3c\xf0\x0b\x5f\x9a\xc2\x0c\xca\x6c\xed\xbe\x52\xbb\x5c\x7a\xb9\xad\x9d\x91\x02\x0e\x2c\xf6\x7a\xb5\x9a\x9f\x49\xfc\x65\x16\x3f\xfe\x19\x2f\x6e\xfb\xca\x07\xd5\x77\xa5\xe5\x19\x17\x54\xae\x0b\x7d\x57\x46\x65\x9a\xcc\x5e\x9f\x1f\xe2\xc7\xc5\xf3\x2c\x7e\x5c\xdc\x4c\xe7\xf3\x3b\xaf\x65\x12\x1f\x1a\x5e\xbb\xff\x9a\x9a\x3f\xc6\x9f\xe2\xd6\xfa\xf6\xf7\xcd\x74\xa2\x05\x70\xfb\x4f\x6f\xa6\x3f\x4f\xe6\xf3\xdb\xa1\xf5\xb6\x09\x72\x60\x68\xbc\x2c\x3b\x53\x92\xe4\x33\xc9\xe0\xba\x2f\xca\xbe\x48\x2a\x73\x1f\x20\x8d\x13\x53\xa8\x12\x41\x4b\xe9\xdf\x4d\x73\x5e\x92\x55\xb6\x79\x44\x08\xb2\x39\x7c\x08\x54\x42\xa1\xfa\x3b\x32\x21\xb4\x35\x66\x2d\x08\x65\x92\x50\x06\xc2\x96\x5b\x21\x3b\x0a\x25\x3c\x72\x90\x1e\x59\x88\xef\x59\xc2\x41\xe9\xad\x2f\x17\x19\x61\xf4\x0b\x31\x6c\xfa\xe8\x58\x50\x10\x9a\x1f\x1b\xa4\x16\x47\x87\x28\xd7\x9c\x8d\xdf\x98\xc8\x12\x10\x0b\xf8\xab\xa6\x02\x52\xfc\x84\x9e\x0d\x0f\xc0\xb8\x09\x03\xdb\xc2\x42\x92\x02\x78\x2d\x6d\x98\xa1\x4c\x42\x06\xc2\x0c\x74\x01\x15\xaf\x45\xa2\x41\xe2\xfc\x88\xab\x12\x92\x13\x15\xe8\xc8\x4d\x34\x64\x27\x9b\xaf\xe8\x91\xa5\xfb\x17\xd0\x7b\x58\x88\xa3\x14\x64\x50\xee\x61\x16\xe5\x14\xfd\x18\x7f\x52\x4e\xd1\xfd\xbf\xad\x29\x06\xfe\x9b\xe4\x75\x40\x19\xac\x2e\x96\x43\x24\xf8\xc2\x52\x56\xd6\xf2\x97\x3a\x97\xb4\xcc\xa9\xa6\x4a\xe3\x12\x68\x36\x43\x4a\x3b\x3f\xfa\x71\x03\x4b\xfa\x91\x6e\x07\xb4\x91\x45\xe4\x49\xea\x4e\xf9\x86\xd2\xc8\x15\x75\xeb\x15\xf6\x86\x82\x62\x45\x12\xeb\x51\x76\x36\x96\x25\xbc\x28\x08\x4b\x8f\x95\xc1\x16\x08\x26\x0e\xf8\x28\x37\x8a\x70\x3e\xba\xe1\x15\xcd\xed\x4c\x74\xcb\x06\x72\x4b\x47\xc8\x5a\xde\xb1\xa2\xb0\x75\xf5\x5e\x4e\x29\x41\xc1\x72\x82\xc6\x4a\x0a\xb2\xf1\x1f\x29\xfc\x08\xa8\x6c\xc9\x79\x0e\x84\xb9\x4a\x4b\x61\x45\xea\xbc\x39\xae\xa4\xa8\x61\x74\x3d\x05\xa4\x94\xfc\xb6\x29\x9d\x7b\x19\x04\x87\xde\xd1\x0d\x0a\x25\x9a\x89\x2c\x07\x75\x8f\x5f\x4f\x27\xaf\x81\x4f\x7e\xd4\xfe\xb6\x90\xb4\x15\x64\xb4\x5b\xca\xf4\xe9\x32\xda\xc1\xd7\x38\xa8\x8a\xb0\x39\xbf\xe9\x3c\x68\x7e\xb1\x5f\xf9\x7e\xd1\x7c\xef\x33\x9d\x64\x97\x80\xd5\x85\x03\xc2\xad\x8f\x4f\x2f\x50\xc8\xa2\xd1\xbe\xed\x76\x3a\xf5\xfd\x92\xd3\xc7\x89\xce\xde\xc7\x27\x4b\x26\x06\xa2\xf3\xa9\x80\xfb\x61\x1e\xa3\x11\x6a\x3b\xe7\xfe\x41\x5a\xcb\x6b\xdb\xf2\x9e\x15\x85\xad\xab\xf7\xfa\x36\x65\x6c\xd7\x26\x8c\x2a\x6d\x74\x9a\x7d\xc1\x67\x4c\x92\xf0\x9a\xa9\x3f\xef\xdd\x29\x82\xe4\x18\x3f\x84\x3e\x8a\x49\xfb\x96\xef\xf6\x75\x3e\xbf\x99\x7e\x3f\x47\xca\x57\xd6\xb6\x3d\xe2\xbc\x68\xb9\x76\x49\xdf\xbb\xbc\x7c\x86\xcd\x79\x39\x7f\x6d\x7b\xce\xd9\xf6\x5c\xb8\x54\x7d\xdd\x36\xac\x68\x8e\x2f\x67\x17\x76\x29\x6f\x7a\xd1\x69\xde\xf6\x96\x44\xae\x83\x2b\x09\x8e\x5a\xf0\xd4\xb1\x3e\x8f\x86\x60\xc1\xed\x70\x13\xff\x58\xc0\x66\x01\xf8\xa0\x45\x11\xfc\xff\x78\x99\xdc\x6e\xb0\x36\xa0\xbd\x4b\x76\xa2\xbe\x02\x29\x29\xd3\x3e\x23\xa2\x4b\xc4\xfd\x09\x30\x5f\x41\x22\xc0\xde\x04\x07\x4a\x72\xc0\xcb\xb1\x13\x62\x6b\x2c\x82\x22\xd3\xdf\xc3\xef\x08\x20\x04\x17\x27\xfc\x30\x6d\x44\xd1\x08\x04\xb9\xd1\x83\x13\x9b\xa2\xd8\xbf\x4d\x6a\x6b\x7e\x9b\x60\xb8\x08\xa0\xc4\x32\xeb\x9d\x1e\xca\x7e\x35\xe0\x9d\x01\x13\x22\x21\xe3\xc2\xdc\x10\xfa\x09\x32\x94\xbb\xdd\x0d\x19\x93\x9f\x43\x82\x9d\x13\x9b\x14\x44\x12\xf3\x48\xb5\xa9\x24\x14\xc7\x8a\x9d\x83\x0e\x1d\x0a\x2c\x0f\x34\xb2\xa5\x1c\xe0\x3f\x52\x52\x9a\x93\xa9\x6a\xae\x5f\x36\x1a\x8c\x29\xd7\x6d\xb4\x0b\x27\x96\x8b\x24\xe6\xab\x1a\x86\x2f\xf1\xd1\x70\x41\xcd\x02\xda\xe2\xf5\xc2\x0f\xae\x88\x75\x71\xda\x6b\x5e\x51\x33\x77\x1b\xfd\x17\x00\x00\xff\xff\x61\xb7\x71\x54\xc7\x26\x00\x00")

func schema010SeedManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schema010SeedManifestSchemaJson,
		"schema/0.1.0/seed.manifest.schema.json",
	)
}

func schema010SeedManifestSchemaJson() (*asset, error) {
	bytes, err := schema010SeedManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0.1.0/seed.manifest.schema.json", size: 9927, mode: os.FileMode(436), modTime: time.Unix(1503407072, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema010SeedMetadataSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x4f\x1b\x3d\x10\xbe\xef\xaf\x18\x99\x1c\x40\xe4\xeb\x45\x5c\xde\x5c\x10\xa7\xaa\x55\x5b\x50\xa9\x7a\x28\xa4\x92\xc9\xce\x26\x46\xbb\xf6\x62\x3b\x42\x11\xcd\x7f\xaf\xec\xfd\xb2\x37\xbb\xb0\x94\x14\xf6\xc4\xec\xd8\x33\x7e\xe6\x99\xb1\xf3\xf0\x18\x00\x90\x81\x5a\xac\x30\xa1\x64\x06\x64\xa5\x75\x3a\x9b\x4c\xee\x94\xe0\xa3\xcc\x3b\x16\x72\x39\x09\x25\x8d\xf4\x68\x7a\x3a\xc9\x7c\x07\x64\x68\xe2\x58\xf8\x44\xc8\x12\x85\x71\x99\xbf\x09\x6a\xb9\x19\x9b\xaf\x3c\x50\x33\x1d\xa3\x89\x2d\x16\x33\x77\x88\x6a\x21\x59\xaa\x99\xe0\x66\xf1\x82\x23\x14\x1b\x80\x2a\x08\x31\x62\x1c\x43\xb8\xdd\xc0\x07\x14\x9f\xae\x2e\xbe\xe6\xd9\x36\xa9\x4d\x26\x6e\xef\x70\xa1\x33\x5f\x2a\x45\x8a\x52\x33\x54\x64\x06\xa6\x48\x00\xa2\x10\xc3\x1f\x28\x55\x96\x3e\x73\x3a\xe1\x4a\x4b\xc6\x97\x36\xdc\xfa\x53\xaa\x35\x4a\x8b\xe4\xd7\x74\xfc\xdf\x78\x3a\x20\x76\x69\x9b\xed\xa8\xb0\x37\xe4\x72\xa0\x58\xbf\xc4\xfb\x35\x93\x68\xf8\xba\xce\x7d\xc5\xee\x61\xf5\xbd\x10\x42\x86\x8c\x53\x8d\x8a\xe4\xde\x79\x99\x42\x70\xbc\x88\xbc\xf8\xc7\xd2\x72\x29\xbd\x14\x8c\x6b\x27\x2b\x00\xa1\x61\xc8\x0c\xa9\x34\xbe\x74\x69\x89\x68\xac\xd0\xdb\xd8\xc0\x9a\x0f\xb6\xee\x05\x20\xc8\xd7\x89\x07\xab\x5c\xc9\x90\xd4\xfc\x73\xef\x7b\x3b\xf4\x0f\x71\x19\x68\x38\x6b\x20\xd1\x50\x40\x0e\x26\x76\x16\x6c\x51\x6a\x92\x0a\x65\x2d\xff\xa8\x6d\xd0\x64\x3b\x07\x36\xd3\xf7\x65\x1d\x6b\xd6\x1f\x0e\x1d\x38\x6f\x47\xe4\xb9\x94\x74\xb3\x17\x36\x3f\x33\x8e\x57\xfe\xbd\x7a\x4f\x36\x1d\x38\xff\x9e\xcd\xb8\xe5\xb0\xd7\x0c\x66\xcf\xf8\xac\x63\xda\x27\xa9\xc5\x53\x4a\xed\x30\x0e\xeb\xcb\x4c\x63\xd2\x14\xf7\xe2\x76\xf8\x0d\xf9\xeb\xf6\x5c\x8a\x78\xb3\x14\xbc\x17\x6d\x29\xb0\xbc\xc5\x8b\xd1\x70\xd2\xeb\x5e\xde\xfe\xd0\xe8\x01\xea\xf3\x68\x37\x76\xa1\xe3\x5c\x07\x6e\x3d\x85\xb4\xd1\x2c\xc1\x2e\xb2\xa6\x4b\x63\xda\x9a\x42\x94\xa6\x52\xd7\xca\x6c\x13\x63\x50\x17\x64\xd7\xd3\xd1\xff\xf3\xc7\xd3\xed\x28\x33\x4e\x2a\xe3\x7b\x61\xcc\x76\x8c\xc3\x9b\x9b\xb1\xb5\x8f\x8f\xce\x0e\x0f\xaf\x8f\x47\xf3\x9d\x2d\x47\xbf\x7f\x1e\x9d\x0d\x48\xd3\xd4\x12\xe4\x61\xef\xe1\x06\x35\xd8\x2d\xca\x33\xe3\xbe\x56\x9b\x3f\x0a\x41\x9e\x65\x37\x83\x27\xa4\x83\x5c\xa3\x12\x67\x20\x2b\xc9\x5d\x4a\x33\x67\x98\x6a\x2a\xff\x1c\x14\xe3\xcb\x18\xa1\xdc\x3b\xac\x8f\x9d\x7f\x4f\x48\xc2\xf8\xc7\xfc\x8a\x9c\x94\xce\xe2\xd2\xb4\xc9\xe3\x3c\x15\x5f\x27\xb7\x28\x1b\xfb\xdb\x6d\xff\x8e\x2e\xaf\xee\x40\x01\xca\x8e\xbf\x77\x9f\x7c\x61\xf5\x04\x17\x1c\x6c\xad\x20\xa2\x92\x0e\xf5\x2c\x1f\xbb\xef\x45\x47\xa1\xbc\xf5\x40\x3a\x3f\x90\xdd\x10\xea\x07\x01\x42\x42\x22\x24\x36\xa1\xa5\x71\xfc\xd4\x3f\x2c\x2f\x92\xa0\x6d\x6d\x72\x47\xe1\x99\x37\xcd\x94\x47\xe5\xb7\xee\xe5\x45\x62\x2d\xab\xba\xe0\x61\x85\x12\x41\xaf\x10\x22\x26\x95\x06\xbc\x5f\xd3\x58\x59\x47\x4c\x95\x7e\xb7\xba\x4f\x9f\xa9\xbb\xf8\x71\xe8\x56\x74\xc6\x12\x98\x29\xd8\xe3\xe0\x39\xdc\xfb\xa3\x67\x1e\x99\x60\x1b\xfc\x09\x00\x00\xff\xff\x1d\xc6\xa5\xe6\x86\x10\x00\x00")

func schema010SeedMetadataSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schema010SeedMetadataSchemaJson,
		"schema/0.1.0/seed.metadata.schema.json",
	)
}

func schema010SeedMetadataSchemaJson() (*asset, error) {
	bytes, err := schema010SeedMetadataSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/0.1.0/seed.metadata.schema.json", size: 4230, mode: os.FileMode(436), modTime: time.Unix(1503407072, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/0.1.0/seed.manifest.example.json": schema010SeedManifestExampleJson,
	"schema/0.1.0/seed.manifest.schema.json": schema010SeedManifestSchemaJson,
	"schema/0.1.0/seed.metadata.schema.json": schema010SeedMetadataSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"0.1.0": &bintree{nil, map[string]*bintree{
			"seed.manifest.example.json": &bintree{schema010SeedManifestExampleJson, map[string]*bintree{}},
			"seed.manifest.schema.json": &bintree{schema010SeedManifestSchemaJson, map[string]*bintree{}},
			"seed.metadata.schema.json": &bintree{schema010SeedMetadataSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

