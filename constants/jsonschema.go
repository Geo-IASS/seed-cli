// Code generated by go-bindata.
// sources:
// schema/seed.manifest.schema.json
// schema/seed.metadata.schema.json
// DO NOT EDIT!

package constants

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSeedManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x6e\xdb\x46\x10\xbe\xf3\x29\x16\xdb\x1c\x24\xbb\x8c\x1d\xa0\x17\xeb\x52\x04\x88\x0e\x3d\x24\x2d\x9a\x36\x87\x48\x6a\xb0\x22\x47\xd4\x3a\x24\x97\x5d\x0e\x5b\xa8\xb5\xde\xbd\x20\x29\xc7\x14\xf7\x97\x8a\x54\xc7\xb0\x7c\x31\x31\x9c\xff\x9d\xf9\x38\xda\xdd\x7f\x03\x42\xe8\x8b\x32\x5a\x43\xc6\xe8\x84\xd0\x35\x62\x31\xb9\xba\xba\x2d\x45\x1e\xb6\xd4\x97\x42\x26\x57\xb1\x64\x2b\x0c\xaf\x7f\xb8\x6a\x69\xdf\xd1\xef\x6b\x39\xdc\x14\x50\x0b\x89\xe5\x2d\x44\xd8\xd2\x58\x1c\x73\xe4\x22\x67\xe9\x2f\x52\x14\x20\x91\x43\x49\x27\x64\xc5\xd2\x12\x1a\x86\xa2\x4b\xae\xcd\x13\x42\x4b\x80\xf8\x03\xc8\x92\x8b\xfc\x0b\xb1\xa3\xbf\x44\xc9\xf3\xa4\xd1\xdf\xd0\x0b\x86\x08\xb2\x66\xa5\x7f\xbc\x9f\x4e\xdf\x7c\xfa\x30\xfd\xf5\xfd\x4f\x3f\xbf\x7b\x41\x1b\x8e\x6d\xcb\x48\x6f\xc5\x52\xa7\xad\xe3\x6d\x43\x77\x79\xdc\x9a\x54\xbd\x6e\xe8\x39\xcb\x60\x8f\x62\x76\x5b\x71\x7d\xc6\xc2\x7f\xae\xc3\x9b\x4f\xe1\xe2\x72\xe7\x79\xc7\xfb\xd6\xb5\x34\x11\x92\xe3\x3a\x53\x93\x33\xc8\xd2\xe8\xfa\x6e\xf6\x2a\xbc\x59\xcc\xae\xc3\x9b\xc5\xc5\x78\x3e\x7f\xe9\xa4\x8c\xc2\x7d\xc2\x5d\xfb\xaf\xf6\xf9\x75\xf8\x31\x6c\xa8\xf7\xcf\x17\xe3\x91\xa2\xc0\xce\x3f\xbe\x18\xff\x38\x9a\xcf\x2f\xbb\xd4\xcb\x5a\xc9\x1e\xa1\xe6\x32\x64\xa6\x60\xd1\x67\x96\xc0\x39\x2f\xbd\xbc\x20\xc7\xd4\x55\x90\x5a\xc1\x18\xca\x48\xf2\x02\xdd\xd9\xd4\xdb\x65\x89\x49\x8c\x49\xc9\x36\xfb\x6b\xc0\x11\xb2\xb2\xc7\x6f\x31\x44\xc8\x56\xdf\x1e\x15\xae\x85\x7c\xe7\x6e\x41\x8b\xf4\x34\x63\x3c\x3d\x5c\xfc\x77\x79\x90\x30\xf2\x0c\x44\x85\x26\x51\x9e\x23\x24\x20\xf5\xb2\x12\x4a\x51\xc9\x08\xfa\x09\x34\x01\x1c\xf1\x05\x39\x62\x01\xba\xe6\x5d\x19\xb1\x94\x49\x85\x6e\x5d\x6b\x62\x5e\x6f\x97\xd3\x03\x5d\x77\x07\xb0\xe3\xd0\x60\xb6\xc6\x21\x0d\x76\x74\xad\xf4\x70\xfc\x75\xf8\xb1\x87\xe3\x0f\x7f\x5b\x9d\x0e\xfa\x17\x4b\x2b\x0f\x37\xf2\x2a\x5b\x76\x2b\xc1\xa5\x96\xe7\x45\x85\x6f\xab\x14\x79\x91\x72\xd0\x2d\x96\xbf\x01\x85\xa6\x31\x49\x25\xfc\x59\x71\x09\x31\x9d\x90\x99\x31\xdb\x96\x0c\x28\x6f\x16\x81\xc3\xa8\xdd\xe4\x7d\x95\x06\x36\xad\x5b\x27\xb6\xd4\x2d\x28\x57\x2c\x32\x42\xcb\xc9\xba\x2c\xca\x62\x5b\x8b\xa9\xe0\xa8\xa4\xa8\x2d\x82\x37\x0c\x99\x4d\x91\xa1\xe3\x06\xf5\x9b\xab\xdb\xe8\x8a\xa7\xe6\x46\xb4\xa3\x06\xb1\x23\x87\x4f\x2c\x07\x44\xe4\x17\xd7\x8e\xcb\x8a\x24\xc4\x1b\x4d\xc8\x50\x44\x21\xa6\xf6\x27\xbd\xf6\xf0\xf0\x6c\x29\x44\x0a\x2c\xb7\xb9\x16\xc3\x8a\x55\x69\xfd\xb5\x42\x59\xc1\x60\x7f\x32\x88\x39\xfb\xad\x35\xe7\xe1\x90\xb9\x1a\x76\x8c\xf6\x9a\xe8\x69\xd3\xb5\xcb\x9e\xdb\xc3\xc3\x69\xc1\xd5\x33\x9a\x41\xe9\x6d\x2a\xd2\xe4\x90\x96\x6e\x70\xd3\x85\xca\xc4\x8a\xcc\x64\x7f\xd5\xb4\x1c\x7d\x94\xd6\xbb\xa8\xfb\x60\xd4\xbf\x2d\xcf\x88\xf0\xac\x11\x01\xbd\xc1\xc0\x9d\x25\xc8\xab\xcc\x52\xe5\x0d\x8f\x0b\x52\x88\x4f\xd0\xe4\x61\x2e\xb7\x32\xed\x06\x2a\x2b\x8f\xb5\x3a\x77\x3c\x2e\xe4\xd2\x75\x20\x79\x04\xa0\xc0\xaf\xc5\x88\xfe\xbc\x67\x1d\x6d\x44\x85\xe7\xd9\xe6\xc0\x88\xfc\xe2\xda\x71\x7d\x9b\x48\x36\x70\x96\xb0\xf7\x90\xd9\xcc\x83\xc3\x27\x34\x12\x89\x2a\xef\x6f\x01\xd8\x4d\x78\x21\x32\x7d\xe5\xbb\x14\xa3\x66\x2f\xea\xf2\x6e\x3e\xbf\x18\x3f\x9d\xaf\xca\xa3\xcd\x41\xce\x6a\x39\x0f\x4a\x4f\x1d\x5e\x3e\xc3\xe6\xb4\x3d\x7f\x9e\x7c\x4e\x39\xf9\x3c\x73\xa8\xfa\x7f\x27\xb1\xac\xfe\x7c\xe9\x7a\xfc\xd9\xed\x06\x93\xe3\xec\x08\x17\x0c\xd7\xde\x9e\x78\x6b\xcd\x44\x6c\x89\xcf\x81\x21\x54\x0a\x73\xb9\xc9\xbf\x0d\xc5\x66\x28\xf0\xce\x88\x22\xc5\x63\x6c\x38\x37\x09\x56\x5e\x28\xfb\xcd\xd6\xaa\x2f\x01\x91\xe7\xc9\xb9\xee\x8f\x53\xf3\x25\x44\x12\xcc\x43\xb0\x27\x24\x7b\x6c\xa1\x1d\xb1\xb6\x86\x56\x50\xa0\x7b\xee\x9e\x35\x80\x94\x42\xbe\x65\x45\x51\xa7\xfa\x68\xa7\xa8\xda\x5a\x1a\x50\x47\xf6\x1a\xa2\x91\x09\x57\xcc\xa7\x98\x4a\xe4\xf7\x02\x9a\x43\xeb\x9e\x2e\x3d\xea\xa9\xaa\xcc\xc7\xd8\x07\x2a\x8c\x18\x42\x22\xa4\x7e\x2c\x74\xb7\x49\x17\xf4\xbe\xdc\xe6\xd0\xf1\x59\x80\xd8\x2a\x58\x9b\x60\xc8\xf4\x6f\xca\x4d\x89\x90\x7d\x2d\xe4\x59\x9a\xa2\xad\x02\xc3\x82\x06\x26\x93\x9d\x2e\x08\x7a\x26\xf5\xc6\xfa\x98\xae\x5e\x8c\x31\x5f\x0d\x51\x2e\x47\x18\x2e\x3d\xe8\xef\x15\x68\xce\xec\xb5\x47\xf1\xda\x93\xc3\xa0\x1b\x7a\x1d\x6a\x13\xa6\x1a\xe2\xde\xfd\xa7\x56\x53\x73\x79\x29\xa8\x65\xb7\xff\x05\x00\x00\xff\xff\xd1\xd1\x1b\x8c\xa3\x25\x00\x00")

func schemaSeedManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaSeedManifestSchemaJson,
		"schema/seed.manifest.schema.json",
	)
}

func schemaSeedManifestSchemaJson() (*asset, error) {
	bytes, err := schemaSeedManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/seed.manifest.schema.json", size: 9635, mode: os.FileMode(448), modTime: time.Unix(1502738879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaSeedMetadataSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xdf\x4f\xdb\x30\x10\x7e\xcf\x5f\x71\x32\x7d\x00\xd1\x52\x84\x78\x59\x5f\x10\xd2\xd0\xc4\xb4\x51\x44\x27\x1e\x06\xdd\x64\x9a\x4b\x6b\x94\xd8\xc1\x76\x85\x2a\xd6\xff\x7d\xb2\xf3\xa3\x76\x9a\x42\x18\x1d\xe4\x09\xe7\x7c\x77\xfe\xee\xbb\xb3\xfb\xf1\x14\x00\x90\x8e\x9a\xcc\x30\xa1\x64\x00\x64\xa6\x75\x3a\xe8\xf7\xef\x95\xe0\xbd\xcc\x7a\x20\xe4\xb4\x1f\x4a\x1a\xe9\xde\xe1\x71\x3f\xb3\xed\x90\xae\x89\x63\xe1\x33\x21\x53\x14\xc6\x64\xfe\x26\xa8\xe5\xe2\xc0\x7c\xe5\x81\x9a\xe9\x18\x4d\x6c\xb1\x99\x99\x43\x54\x13\xc9\x52\xcd\x04\x37\x9b\x43\x8e\x50\x38\x00\x55\x10\x62\xc4\x38\x86\x70\xb7\x80\x2f\x28\xbe\x8e\x86\x17\x79\xb6\x45\x6a\x93\x89\xbb\x7b\x9c\xe8\xcc\x96\x4a\x91\xa2\xd4\x0c\x15\x19\x80\x29\x12\x80\x28\xc4\xf0\x1a\xa5\xca\xd2\x67\x46\x27\x5c\x69\xc9\xf8\xd4\x86\x5b\x7b\x4a\xb5\x46\x69\x91\xfc\x1a\x9d\x9d\x7d\xfe\x7d\x7d\x76\x35\x3a\x1f\x5e\x74\x88\xf5\x58\x66\x8e\xab\x12\x6a\x52\x3a\x88\xac\x5d\xe2\xc3\x9c\x49\x34\xb4\xdd\xe4\xb6\xc2\xbb\xbb\xfa\x9e\x08\x21\x43\xc6\xa9\x46\x45\x72\xeb\xb8\x4c\x21\x38\x0e\x23\x2f\xfe\xa9\x5c\xb9\xcc\x5e\x0a\xc6\xb5\x93\x15\x80\xd0\x30\x64\x86\x5b\x1a\x5f\xba\xec\x44\x34\x56\xe8\x39\xd6\x90\xe7\x83\xad\x5a\x01\x08\xf2\x79\xe2\xc1\x2a\x77\x32\x24\x15\xfb\xd8\xfb\x5e\x76\xfd\x43\x5c\x06\x6a\xce\xea\x48\x34\x14\x90\x9d\xbe\x1d\x09\x5b\x94\xea\xa7\x42\xd9\x95\x7f\xd4\x32\xa8\x5b\x3b\x07\xd6\xd3\xf7\x7d\x1e\x6b\xd6\x1e\x0e\x1d\x38\xef\x47\xe4\xa9\x94\x74\xb1\x15\x36\xbf\x31\x8e\x23\xff\x7a\x7d\x24\x9b\x0e\x9c\xff\xcf\x66\xbc\xe1\xb0\xb7\x0c\x66\xcb\xf8\xac\x62\xda\x26\xa9\xc5\x53\x4a\xed\x30\x76\xab\xdb\x4c\x63\x52\x17\xf7\xea\x76\xf8\x0d\xf9\xe7\xf6\x5c\x8a\x78\x31\x15\xbc\x15\x6d\x29\xb0\xbc\xc7\x8b\x51\x73\xd2\xdb\x5e\xde\xf6\xd0\xe8\x01\x6a\xf3\x68\xd7\x76\xa1\xe1\x5c\x07\x6e\x3d\x85\xb4\xd1\x2c\xc1\x26\xb2\xa6\x49\x63\x36\x35\x85\x28\x4d\xa5\xae\x94\xb9\x49\x93\x41\x55\x97\xdd\x1c\xf6\x3e\x8d\x9f\x8e\x97\xbd\x6c\x71\xb4\x5a\xfc\x28\x16\x83\xb5\xc5\xee\xed\xed\x81\x5d\xef\xef\x9d\xec\xee\xde\xec\xf7\xc6\x6b\x2e\x7b\x7f\x7e\xee\x9d\x74\x48\xdd\xd4\x12\xe4\x61\xeb\xe1\x06\x15\xd8\x1b\x94\x67\xc6\x7d\xa5\x36\x7f\x14\x82\x3c\xcb\x7a\x06\x4f\x4f\x07\xb9\x46\x25\xce\x40\xae\x94\x77\x29\xcd\x9c\x61\xaa\x88\xfd\x53\x50\x8c\x4f\x63\x84\xd2\xb7\x5b\x1d\x3b\xff\x9e\x90\x84\xf1\xf3\xfc\x8a\x1c\x95\xc6\xe2\xd2\x6c\x92\xc7\x79\x2a\x3e\x4f\xee\x50\xd6\xf6\xb7\x99\xff\x9a\x2e\x5f\xdd\x81\x02\x94\x1d\x7f\xef\x3e\xf9\xc2\xea\x19\x2e\x38\xd8\x5a\x41\x44\x25\x1d\xea\x45\x3e\xd6\xdf\x8b\x86\x42\x79\xe9\x81\x74\x7e\x20\x9b\x21\xd4\x8f\x02\x84\x84\x44\x48\xac\x43\x4b\xe3\xf8\xb9\x7f\x58\x5e\x25\x41\x37\xb5\xc9\x1d\x85\x17\xde\x34\x53\x1e\x95\x57\xcd\xcb\x8b\xc4\x5c\xae\xea\x82\xc7\x19\x4a\x04\x3d\x43\x88\x98\x54\x1a\xf0\x61\x4e\x63\x65\x0d\x31\x55\xfa\xc3\xea\x3e\x7e\xa1\xee\xe2\xc7\xa1\x59\xd1\x19\x4b\x60\xa6\x60\x8b\x83\xe7\x70\xef\x8f\x9e\x79\x64\x82\x65\xf0\x37\x00\x00\xff\xff\xbb\x44\x9e\x3d\x8d\x10\x00\x00")

func schemaSeedMetadataSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaSeedMetadataSchemaJson,
		"schema/seed.metadata.schema.json",
	)
}

func schemaSeedMetadataSchemaJson() (*asset, error) {
	bytes, err := schemaSeedMetadataSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/seed.metadata.schema.json", size: 4237, mode: os.FileMode(448), modTime: time.Unix(1502721563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/seed.manifest.schema.json": schemaSeedManifestSchemaJson,
	"schema/seed.metadata.schema.json": schemaSeedMetadataSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"seed.manifest.schema.json": &bintree{schemaSeedManifestSchemaJson, map[string]*bintree{}},
		"seed.metadata.schema.json": &bintree{schemaSeedMetadataSchemaJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

