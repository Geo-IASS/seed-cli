// Code generated by go-bindata.
// sources:
// schema/seed.manifest.schema.json
// schema/seed.metadata.schema.json
// DO NOT EDIT!

package constants

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSeedManifestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x6f\xdb\x36\x14\xbf\xeb\xaf\x20\xb4\x1e\xec\x64\x6a\x52\x60\x97\xe4\x32\x14\x68\x0e\x3b\x74\x1b\xd6\xa1\x87\xc6\x5e\xf1\x22\x3d\xcb\x4c\x25\x52\xa3\xa8\x0d\xee\xe2\xff\x7d\xd0\x47\x12\x99\xdf\x8a\xe3\x6e\x45\x9d\x4b\x8c\xc7\xc7\xf7\xa5\xdf\xfb\x91\x12\xf9\x4f\x44\x48\xfc\xa2\x4e\xd7\x58\x42\x7c\x49\xe2\xb5\x94\xd5\xe5\xd9\xd9\x6d\xcd\x59\xd2\x4b\x5f\x72\x91\x9f\x65\x02\x56\x32\x39\xff\xe1\xac\x97\x7d\x17\x7f\xdf\xce\x93\x9b\x0a\xdb\x49\xfc\xe6\x16\x53\xd9\xcb\x20\xcb\xa8\xa4\x9c\x41\xf1\xab\xe0\x15\x0a\x49\xb1\x8e\x2f\xc9\x0a\x8a\x1a\x3b\x85\x6a\x2c\x6e\xdd\x13\x12\xd7\x88\xd9\x7b\x14\x35\xe5\xec\x41\x38\xb2\x5f\x4b\x41\x59\xde\xd9\xef\xe4\x15\x48\x89\xa2\x55\x8d\xff\x78\x77\x75\xf5\xe6\xe3\xfb\xab\xdf\xde\xfd\xf4\xcb\xcf\x2f\xe2\x4e\x63\xdb\x2b\xc6\xb7\xfc\xc6\x64\x6d\x14\x6d\x27\xf7\x45\xdc\xbb\xd4\xa3\xee\xe4\x0c\x4a\xdc\x91\xd8\xc3\xd6\x42\xbf\x86\xe4\xf3\x79\x72\xf1\x31\x59\x9e\x0e\x91\x8f\xa2\xef\x43\x2b\x72\x2e\xa8\x5c\x97\x7a\x71\x26\x79\x9a\x9d\xdf\x5d\xbf\x4a\x2e\x96\xd7\xe7\xc9\xc5\xf2\x64\xbe\x58\xbc\xf4\x4a\x66\xc9\xae\xe0\xae\xff\xd7\xc6\xfc\x3a\xf9\x90\x74\xd2\xfb\xdf\x27\xf3\x99\x66\xc0\xad\x3f\x3f\x99\xff\x38\x5b\x2c\x4e\xc7\xd2\xd3\xd6\xc8\x8e\xa0\xd5\xb2\x54\xa6\x82\xf4\x13\xe4\x78\xac\x8b\x52\x17\x49\x65\xe1\x03\xa4\x71\x62\x86\x75\x2a\x68\x25\xfd\xd5\x34\xfb\x85\xbc\xb6\xcd\x03\x21\x60\xb3\xfb\x10\xa8\xc4\x52\xd5\x77\x78\x22\x64\x6b\xf4\x5a\x02\x65\x12\x28\x43\x61\xf3\xad\x34\x3b\x09\x6d\x78\xe2\x68\x7a\x62\x69\x7c\x4f\x0a\x3b\xa1\x77\xba\x5c\xe4\xc0\xe8\x67\x30\x14\x7d\xb2\x2d\x2c\x81\x16\xfb\x1a\x69\xc4\xde\x26\xaa\x35\x67\xd3\x0b\x13\x59\x0c\xc6\x02\xff\x6c\xa8\xc0\x2c\xbe\x24\xd7\x86\x07\x60\x2c\xc2\x48\xb6\xb4\x34\x49\x89\xbc\x91\x36\xcc\x50\x26\x31\x47\x61\x06\xba\xc0\x9a\x37\x22\xd5\x20\x71\x78\xc4\xd5\x29\x14\xa0\x02\x9d\xb8\x1b\x8d\xd8\x9b\xcd\x17\xf4\xc4\xd0\xfd\x09\x0c\x1a\x96\xc6\x51\x02\x32\x30\xf7\xd8\x8b\xb2\x8a\xbe\x4e\x3e\x28\xab\xe8\xe3\xdf\xd6\x64\x23\xfe\x0b\x8a\x26\x20\x0c\xd6\x94\x37\x63\x24\xf8\xcc\x52\x56\x35\xf2\x6d\x53\x48\x5a\x15\x54\x63\xa5\x69\x0e\x34\x99\xc1\xa5\xbd\x3f\x86\x71\x43\x97\x0c\x23\x7d\x05\xb4\x91\x65\xe4\x71\xea\x76\x79\x8f\xd2\xc8\x65\x75\xeb\x25\xf6\xb6\x05\xc5\x0a\x52\xeb\x52\x76\xb0\x2e\x4b\xcb\x6c\x5f\x0a\xec\x40\xf0\x06\x24\xb8\x0c\x59\x3a\x6e\x52\xbf\xf9\xba\x2d\x5e\xd1\xc2\xde\x88\x6e\xd6\x20\x6e\xe6\x08\xc9\xe5\x09\x19\x85\xe5\x35\x68\x39\x99\x84\x04\xb3\x09\x99\xca\x28\xc4\xd6\xfe\x44\x69\x8f\x80\xc8\x6e\x38\x2f\x10\x98\x2b\xb4\x0c\x57\xd0\x14\xed\x6a\x25\x45\x83\x93\xe3\x29\x31\xa3\xf0\xfb\xa6\x72\xd6\x32\x08\x0e\x83\xa2\x1b\x14\x8a\x35\x53\xbf\xec\xc4\x3d\x3d\x9f\x9e\x5d\x03\x9f\xfc\xa4\xfa\x76\x90\xb4\x05\x64\x94\x5b\xc2\xf4\xd1\x32\x79\x80\xaf\x71\x50\xe5\x60\xb3\x7f\xd3\x72\xd0\xbe\xb7\x1f\xfb\xfd\x9b\xee\xf7\xc1\xd3\xb3\x54\x09\x59\x53\x3a\x20\xdc\xe9\xf8\xf8\x82\x84\x24\x4d\x1e\x77\xdd\x4e\xa5\x61\xbb\xe4\xd4\x71\xa2\x73\xd0\xf1\xd1\x92\xa9\x03\xc9\xe1\x58\xc0\xfd\x30\xf7\xe1\x08\x75\x37\xe7\x7e\x1f\x6d\xe4\x71\xe7\xf2\xc4\x8c\xc2\xf2\x1a\xb4\xfe\x9f\x4c\xf6\xb0\x53\x98\x14\xda\x64\x37\x8f\x01\x1f\xd0\x49\xca\x1b\xa6\xbe\xe0\xbb\x5d\x04\x31\x72\xfc\x2a\xf4\x51\xcc\xba\xef\x7c\xa7\x77\x8b\xc5\xc9\xfc\xeb\x59\x55\xbe\x30\xbd\x3d\x22\xce\x8b\x96\xe3\x46\xe9\x6b\xa7\x97\x4f\xb8\x39\x6c\xcf\x1f\x77\x3e\x87\xdc\xf9\x7c\xe3\x54\xf5\x65\x77\x62\x65\xbb\x7c\x99\x7a\xfc\xf8\xad\x77\xfa\xb7\xde\x0a\xe4\x3a\x38\x8a\x60\xab\x25\xcf\x1c\xb9\x79\xf8\x23\x16\xdc\x0e\x35\xf1\xb7\x05\x68\x96\x0a\x8d\xb6\x27\x82\xff\x17\x9f\x92\xbb\x02\x6b\x03\xda\x97\x64\x27\xe2\x6b\x94\x92\x32\xed\x10\x91\x1c\x31\xff\x24\xcc\xd7\x98\x0a\xb4\x6f\x80\x03\xe9\x38\xe0\xdb\xd8\x33\x62\x6b\x2a\x82\x22\xd3\xef\xf1\x29\x02\x0a\xc1\xc5\x5b\xa8\xaa\xb6\xd4\xcf\x76\x38\x6d\xc4\xd2\x04\x1c\xb9\x31\x14\xa7\x36\x5e\xb1\x9f\x4f\x6a\x99\xdf\x4f\x30\x5c\x06\x50\x6c\x99\x59\x4f\x37\x65\xbf\x1e\xf0\x44\x83\x29\x48\xcc\xb9\x30\x6f\x09\xfd\x6d\x32\x26\xbd\x87\x5b\x32\x26\x3d\x07\x11\x3b\x27\xb6\x2e\x40\x82\x79\xa4\xde\xd4\x12\xcb\x7d\x29\xcf\xd1\x14\x3d\x0a\x2c\x0f\x34\xb2\xb9\x1c\x75\x41\xa4\xb8\x34\x3b\x53\x39\x5d\xbf\x70\x34\x1a\x53\xae\xdc\x68\x97\x4e\x2c\x97\x49\xcc\xd7\x35\x0c\xa7\xf1\xc6\x43\x76\xe3\x99\x60\x34\x4e\xbd\x4d\xb5\x4b\x53\x4f\x71\xe7\x5e\x59\x6f\xa9\xbb\x14\x16\xb5\x73\xb7\xff\x06\x00\x00\xff\xff\xbd\x8e\xcd\x53\xfb\x26\x00\x00")

func schemaSeedManifestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaSeedManifestSchemaJson,
		"schema/seed.manifest.schema.json",
	)
}

func schemaSeedManifestSchemaJson() (*asset, error) {
	bytes, err := schemaSeedManifestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/seed.manifest.schema.json", size: 9979, mode: os.FileMode(448), modTime: time.Unix(1502892593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaSeedMetadataSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xdf\x4f\xdb\x30\x10\x7e\xcf\x5f\x71\x32\x7d\x00\xd1\x52\x84\x78\x59\x5f\x10\xd2\xd0\xc4\xb4\x51\x44\x27\x1e\x06\xdd\x64\x9a\x4b\x6b\x94\xd8\xc1\x76\x85\x2a\xd6\xff\x7d\xb2\xf3\xa3\x76\x9a\x42\x18\x1d\xe4\x09\xe7\x7c\x77\xfe\xee\xbb\xb3\xfb\xf1\x14\x00\x90\x8e\x9a\xcc\x30\xa1\x64\x00\x64\xa6\x75\x3a\xe8\xf7\xef\x95\xe0\xbd\xcc\x7a\x20\xe4\xb4\x1f\x4a\x1a\xe9\xde\xe1\x71\x3f\xb3\xed\x90\xae\x89\x63\xe1\x33\x21\x53\x14\xc6\x64\xfe\x26\xa8\xe5\xe2\xc0\x7c\xe5\x81\x9a\xe9\x18\x4d\x6c\xb1\x99\x99\x43\x54\x13\xc9\x52\xcd\x04\x37\x9b\x43\x8e\x50\x38\x00\x55\x10\x62\xc4\x38\x86\x70\xb7\x80\x2f\x28\xbe\x8e\x86\x17\x79\xb6\x45\x6a\x93\x89\xbb\x7b\x9c\xe8\xcc\x96\x4a\x91\xa2\xd4\x0c\x15\x19\x80\x29\x12\x80\x28\xc4\xf0\x1a\xa5\xca\xd2\x67\x46\x27\x5c\x69\xc9\xf8\xd4\x86\x5b\x7b\x4a\xb5\x46\x69\x91\xfc\x1a\x9d\x9d\x7d\xfe\x7d\x7d\x76\x35\x3a\x1f\x5e\x74\x88\xf5\x58\x66\x8e\xab\x12\x6a\x52\x3a\x88\xac\x5d\xe2\xc3\x9c\x49\x34\xb4\xdd\xe4\xb6\xc2\xbb\xbb\xfa\x9e\x08\x21\x43\xc6\xa9\x46\x45\x72\xeb\xb8\x4c\x21\x38\x0e\x23\x2f\xfe\xa9\x5c\xb9\xcc\x5e\x0a\xc6\xb5\x93\x15\x80\xd0\x30\x64\x86\x5b\x1a\x5f\xba\xec\x44\x34\x56\xe8\x39\xd6\x90\xe7\x83\xad\x5a\x01\x08\xf2\x79\xe2\xc1\x2a\x77\x32\x24\x15\xfb\xd8\xfb\x5e\x76\xfd\x43\x5c\x06\x6a\xce\xea\x48\x34\x14\x90\x9d\xbe\x1d\x09\x5b\x94\xea\xa7\x42\xd9\x95\x7f\xd4\x32\xa8\x5b\x3b\x07\xd6\xd3\xf7\x7d\x1e\x6b\xd6\x1e\x0e\x1d\x38\xef\x47\xe4\xa9\x94\x74\xb1\x15\x36\xbf\x31\x8e\x23\xff\x7a\x7d\x24\x9b\x0e\x9c\xff\xcf\x66\xbc\xe1\xb0\xb7\x0c\x66\xcb\xf8\xac\x62\xda\x26\xa9\xc5\x53\x4a\xed\x30\x76\xab\xdb\x4c\x63\x52\x17\xf7\xea\x76\xf8\x0d\xf9\xe7\xf6\x5c\x8a\x78\x31\x15\xbc\x15\x6d\x29\xb0\xbc\xc7\x8b\x51\x73\xd2\xdb\x5e\xde\xf6\xd0\xe8\x01\x6a\xf3\x68\xd7\x76\xa1\xe1\x5c\x07\x6e\x3d\x85\xb4\xd1\x2c\xc1\x26\xb2\xa6\x49\x63\x36\x35\x85\x28\x4d\xa5\xae\x94\xb9\x49\x93\x41\x55\x97\xdd\x1c\xf6\x3e\x8d\x9f\x8e\x97\xbd\x6c\x71\xb4\x5a\xfc\x28\x16\x83\xb5\xc5\xee\xed\xed\x81\x5d\xef\xef\x9d\xec\xee\xde\xec\xf7\xc6\x6b\x2e\x7b\x7f\x7e\xee\x9d\x74\x48\xdd\xd4\x12\xe4\x61\xeb\xe1\x06\x15\xd8\x1b\x94\x67\xc6\x7d\xa5\x36\x7f\x14\x82\x3c\xcb\x7a\x06\x4f\x4f\x07\xb9\x46\x25\xce\x40\xae\x94\x77\x29\xcd\x9c\x61\xaa\x88\xfd\x53\x50\x8c\x4f\x63\x84\xd2\xb7\x5b\x1d\x3b\xff\x9e\x90\x84\xf1\xf3\xfc\x8a\x1c\x95\xc6\xe2\xd2\x6c\x92\xc7\x79\x2a\x3e\x4f\xee\x50\xd6\xf6\xb7\x99\xff\x9a\x2e\x5f\xdd\x81\x02\x94\x1d\x7f\xef\x3e\xf9\xc2\xea\x19\x2e\x38\xd8\x5a\x41\x44\x25\x1d\xea\x45\x3e\xd6\xdf\x8b\x86\x42\x79\xe9\x81\x74\x7e\x20\x9b\x21\xd4\x8f\x02\x84\x84\x44\x48\xac\x43\x4b\xe3\xf8\xb9\x7f\x58\x5e\x25\x41\x37\xb5\xc9\x1d\x85\x17\xde\x34\x53\x1e\x95\x57\xcd\xcb\x8b\xc4\x5c\xae\xea\x82\xc7\x19\x4a\x04\x3d\x43\x88\x98\x54\x1a\xf0\x61\x4e\x63\x65\x0d\x31\x55\xfa\xc3\xea\x3e\x7e\xa1\xee\xe2\xc7\xa1\x59\xd1\x19\x4b\x60\xa6\x60\x8b\x83\xe7\x70\xef\x8f\x9e\x79\x64\x82\x65\xf0\x37\x00\x00\xff\xff\xbb\x44\x9e\x3d\x8d\x10\x00\x00")

func schemaSeedMetadataSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaSeedMetadataSchemaJson,
		"schema/seed.metadata.schema.json",
	)
}

func schemaSeedMetadataSchemaJson() (*asset, error) {
	bytes, err := schemaSeedMetadataSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/seed.metadata.schema.json", size: 4237, mode: os.FileMode(448), modTime: time.Unix(1502721563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/seed.manifest.schema.json": schemaSeedManifestSchemaJson,
	"schema/seed.metadata.schema.json": schemaSeedMetadataSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"seed.manifest.schema.json": &bintree{schemaSeedManifestSchemaJson, map[string]*bintree{}},
		"seed.metadata.schema.json": &bintree{schemaSeedMetadataSchemaJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

